create extension if not exists pgcrypto;
create table if not exists public.users (
  id uuid primary key default gen_random_uuid(),
  email text unique not null,
  password_hash text not null,
  name text not null,
  mobile text not null,
  role text not null default 'customer' check (role in ('customer','staff','admin')),
  marketing_opt_in boolean default false,
  created_at timestamptz default now()
);
create table if not exists public.products (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  sku text unique not null,
  short_description text,
  description text,
  price_pence integer not null check (price_pence >= 0),
  pack_label text,
  allergens text[] default '{}',
  ingredients text,
  image_url text,
  stock int not null default 0,
  visible boolean not null default true,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
create index if not exists products_visible_stock_idx on public.products (visible, stock);
create table if not exists public.orders (
  id uuid primary key default gen_random_uuid(),
  order_number bigint generated by default as identity unique,
  user_id uuid references public.users(id) on delete set null,
  items jsonb not null,
  subtotal_pence integer not null,
  bag_opt_in boolean default false,
  bag_fee_pence integer not null default 0,
  total_pence integer not null,
  status text not null default 'unpaid' check (status in ('unpaid','ready','collected','cancelled')),
  pickup_date date not null,
  pickup_time time not null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
create index if not exists orders_pickup_status_idx on public.orders (pickup_date, status);
create table if not exists public.audit_logs (
  id uuid primary key default gen_random_uuid(),
  actor_id uuid references public.users(id) on delete set null,
  action text not null,
  target text,
  metadata jsonb,
  created_at timestamptz default now()
);
create table if not exists public.suggestions (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references public.users(id) on delete set null,
  name text,
  email text,
  message text not null,
  created_at timestamptz default now()
);
alter table public.users enable row level security;
alter table public.orders enable row level security;
alter table public.products enable row level security;
alter table public.audit_logs enable row level security;
alter table public.suggestions enable row level security;
create policy catalogue_read on public.products for select using (visible = true and stock > 0);
create policy deny_by_default_orders on public.orders for all using (false) with check (false);
