{
  "meta": {
    "project": "TJ's Bake & Browse",
    "date": "2025-08-14",
    "prepared_by": "Generated by AI Assistant"
  },
  "product_overview": "TJ's Bake & Browse is a modern bakery e-commerce platform designed for a Jersey-based bakery business. It provides a clean, minimalistic user experience for browsing baked goods and groceries, managing shopping carts, placing orders with scheduled pickups, and an admin dashboard for inventory and order management. The system includes real-time product updates, a configurable bag fee, and a robust authentication and authorization model.",
  "core_goals": [
    "Provide a simple and elegant online platform for customers to browse bakery products and make orders for collection.",
    "Ensure real-time synchronization of product availability and pricing between admin and customer views with cache management.",
    "Allow customers to schedule their order pickup with slot availability and capacity control.",
    "Equip administrators with comprehensive tools for managing products, categories, inventory, orders, and configurable fees.",
    "Enhance user experience through responsive design, allergen information, and seamless cart persistence.",
    "Maintain secure access control and robust API validation to protect data integrity and privacy."
  ],
  "key_features": [
    "Product Catalogue API exposing visible products with category, stock, pricing, image, and allergen informations.",
    "Order Management API for creating and updating orders with GST and bag fees.",
    "Slot Availability API generating configurable pickup slots with capacity management and exclusions (e.g. Sundays).",
    "Authentication system using NextAuth.js for user registration, login, and session management including admin role enforcement.",
    "Admin Product Management including CRUD for products, categories, and inventory tracking with alerts.",
    "Suggestions & Feedback system allowing customers to submit feedback with email notifications.",
    "Configurable Fees API allowing dynamic retrieval of fees such as bag fees.",
    "Shopping Cart API supporting persistence via localStorage and planned migration to database-backed carts.",
    "Comprehensive admin dashboard for orders, products, and inventory management with status filtering and order detail expansions.",
    "Real-time update mechanisms with cache invalidation and visibility change detection for seamless data freshness."
  ],
  "user_flow_summary": [
    "Guests browse products by category through frontend pages (e.g., /baked-goods, /groceries) where products are displayed with images, prices, stock status, and allergen icons.",
    "Users can add products to the shopping cart that persists using localStorage and synchronize across tabs.",
    "Customers proceed to checkout, enter personal details, choose pickup date and time slot, and optionally select a bag fee.",
    "On placing an order, the system validates the input, creates order records in the database, calculates fees and totals, and sends confirmation emails via Resend.",
    "Registered users can login or register via authentication pages that manage sessions using NextAuth.js.",
    "Admin users access the protected admin dashboard to view and manage orders, update order statuses, edit product information, manage inventory levels, and adjust configurable fees.",
    "Administrators use the order management interface to update order statuses such as confirmed, preparing, ready, or collected, with restrictions preventing editing collected orders unless overridden.",
    "Admins can manage product details including SKU, pricing, images, visibility, categories, and stock replenishment.",
    "Suggestions submitted by customers are stored in the database and notify the business via email for further action."
  ],
  "validation_criteria": [
    "The Products API returns all visible products with correct and consistent category information and images, refreshing updates within 30 seconds without stale cache.",
    "Order creation endpoint validates request payloads strictly according to the Zod schema, correctly records orders with line items, and computes fees accurately.",
    "Pickup slot APIs generate slots according to configured business hours, respect capacity limits, and exclude non-operating days.",
    "Authentication endpoints enforce proper validation, securely register users, and restrict admin APIs to authorized roles only.",
    "Admin APIs correctly reflect CRUD operations on products, inventory, and orders, with changes immediately reflected in the frontend.",
    "Cache invalidation and real-time update mechanisms operate correctly to reflect admin changes on customer pages within defined intervals or upon tab focus.",
    "The suggestions system accepts valid user feedback submissions and persists them in the database, triggering notification emails without errors.",
    "UI pages conform to the minimal-elegance design system ensuring consistency, responsiveness, and accessibility.",
    "Environment variables and configuration ensure security of secrets and operation parameters, with secrets rotated regularly and deployment environment tested prior to going live."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js 14",
      "React 18",
      "PostgreSQL",
      "Supabase",
      "TailwindCSS",
      "NextAuth.js",
      "Vitest",
      "Resend",
      "Zod"
    ],
    "features": [
      {
        "name": "Product Catalogue API",
        "description": "Retrieve all visible products with categories, stock, pricing, and allergen information",
        "files": [
          "app/api/products/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/products": {
              "get": {
                "summary": "Get all visible products",
                "responses": {
                  "200": {
                    "description": "List of products with categories",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "sku": {
                                "type": "string"
                              },
                              "price_pence": {
                                "type": "integer"
                              },
                              "stock_quantity": {
                                "type": "integer"
                              },
                              "categories": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Order Management API",
        "description": "Handle order creation, status updates, and order retrieval with GST calculations",
        "files": [
          "app/api/orders/route.ts",
          "app/api/admin/orders/route.ts",
          "app/api/admin/orders/[id]/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/orders": {
              "post": {
                "summary": "Create new order",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "customer_name": {
                            "type": "string"
                          },
                          "customer_email": {
                            "type": "string"
                          },
                          "customer_mobile": {
                            "type": "string"
                          },
                          "pickup_date": {
                            "type": "string"
                          },
                          "pickup_time": {
                            "type": "string"
                          },
                          "items": {
                            "type": "array"
                          },
                          "bag_fee_included": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Order created successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Slot Availability API",
        "description": "Generate and check pickup slot availability with capacity management",
        "files": [
          "app/api/slots/route.ts",
          "app/api/availability/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/slots": {
              "get": {
                "summary": "Get available pickup slots",
                "responses": {
                  "200": {
                    "description": "Available time slots with capacity",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "slots": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "date": {
                                    "type": "string"
                                  },
                                  "times": {
                                    "type": "array"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Authentication System",
        "description": "User registration, login, and session management with NextAuth.js",
        "files": [
          "app/api/auth/[...nextauth]/route.ts",
          "app/api/auth/register/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/auth/register": {
              "post": {
                "summary": "Register new user",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "mobile": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "User registered successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Admin Product Management",
        "description": "CRUD operations for products with inventory tracking and category management",
        "files": [
          "app/api/admin/products/route.ts",
          "app/api/admin/products/[id]/route.ts",
          "app/api/admin/categories/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/admin/products": {
              "get": {
                "summary": "Get all products for admin",
                "responses": {
                  "200": {
                    "description": "All products including hidden ones"
                  }
                }
              },
              "post": {
                "summary": "Create new product",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "sku": {
                            "type": "string"
                          },
                          "price_pence": {
                            "type": "integer"
                          },
                          "category_id": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Inventory Management",
        "description": "Stock tracking, low stock alerts, and inventory import/export functionality",
        "files": [
          "app/api/admin/inventory/route.ts",
          "app/api/admin/inventory/export/route.ts",
          "app/api/admin/inventory/import/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/admin/inventory": {
              "get": {
                "summary": "Get inventory status",
                "responses": {
                  "200": {
                    "description": "Current inventory levels"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Suggestions & Feedback System",
        "description": "Customer feedback submission with email notifications to business",
        "files": [
          "app/api/suggestions/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/suggestions": {
              "post": {
                "summary": "Submit customer suggestion",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "subject": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "category": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Suggestion submitted successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Configurable Fees API",
        "description": "Retrieve active fees like bag fees for checkout calculations",
        "files": [
          "app/api/fees/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/fees": {
              "get": {
                "summary": "Get active fees",
                "responses": {
                  "200": {
                    "description": "List of active fees",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "fees": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "amount_pence": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Shopping Cart API",
        "description": "Cart persistence and management for user sessions",
        "files": [
          "app/api/cart/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/cart": {
              "post": {
                "summary": "Save cart data",
                "responses": {
                  "200": {
                    "description": "Cart saved successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Debug & System Health",
        "description": "System diagnostics and database connectivity checks",
        "files": [
          "app/api/debug/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "paths": {
            "/api/debug": {
              "get": {
                "summary": "System health check",
                "responses": {
                  "200": {
                    "description": "System status and database connectivity"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Customer Web Pages",
        "description": "Product browsing, checkout, and account management pages",
        "files": [
          "app/page.tsx",
          "app/baked-goods/page.tsx",
          "app/groceries/page.tsx",
          "app/basket/page.tsx",
          "app/checkout/page.tsx",
          "app/about/page.tsx",
          "app/suggestions/page.tsx",
          "app/login/page.tsx",
          "app/register/page.tsx",
          "app/order-success/page.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Customer Pages",
            "description": "Frontend pages for customer interactions"
          }
        }
      },
      {
        "name": "Admin Dashboard",
        "description": "Administrative interface for order, product, and inventory management",
        "files": [
          "app/admin/page.tsx",
          "app/admin/orders/page.tsx",
          "app/admin/products/page.tsx",
          "app/admin/inventory/page.tsx",
          "app/admin/layout.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Admin Dashboard",
            "description": "Administrative interface pages"
          }
        }
      }
    ]
  }
}
