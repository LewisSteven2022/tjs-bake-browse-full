-- =====================================================
-- COMPLETE DATABASE SETUP FOR TJ'S BAKE & BROWSE
-- =====================================================
-- Run this script in your Supabase SQL Editor to recreate
-- the entire database from scratch with proper RLS policies
-- =====================================================

-- 1. CREATE EXTENSIONS
-- =====================================================
create extension pgcrypto;

-- 2. CREATE TABLES
-- =====================================================

-- Users table
create table public.users (
  id uuid primary key default gen_random_uuid(),
  email text unique not null,
  password_hash text not null,
  name text not null,
  mobile text not null,
  role text not null default 'customer' check (role in ('customer','staff','admin')),
  marketing_opt_in boolean default false,
  created_at timestamptz default now()
);

-- Categories table
create table public.categories (
  id uuid primary key default gen_random_uuid(),
  name text unique not null,
  slug text unique not null,
  description text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Products table
create table public.products (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  sku text unique not null,
  short_description text,
  description text,
  price_pence integer not null check (price_pence >= 0),
  pack_label text,
  allergens text[] default '{}',
  ingredients text,
  image_url text,
  stock int not null default 0,
  visible boolean not null default true,
  category_id uuid references public.categories(id),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Orders table
create table public.orders (
  id uuid primary key default gen_random_uuid(),
  order_number bigint generated by default as identity unique,
  user_id uuid references public.users(id) on delete set null,
  customer_email text,
  customer_name text,
  items jsonb not null,
  subtotal_pence integer not null,
  bag_opt_in boolean default false,
  bag_fee_pence integer not null default 0,
  total_pence integer not null,
  status text not null default 'unpaid' check (status in ('unpaid','ready','collected','cancelled')),
  pickup_date date not null,
  pickup_time time not null,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
  
);

-- Audit logs table
create table public.audit_logs (
  id uuid primary key default gen_random_uuid(),
  actor_id uuid references public.users(id) on delete set null,
  action text not null,
  target text,
  metadata jsonb,
  created_at timestamptz default now()
);

-- Suggestions table
create table public.suggestions (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references public.users(id) on delete set null,
  name text,
  email text,
  message text not null,
  created_at timestamptz default now()
);

-- 3. CREATE INDEXES
-- =====================================================
create index products_visible_stock_idx on public.products (visible, stock);
create index orders_pickup_status_idx on public.orders (pickup_date, status);

-- 4. INSERT DEFAULT DATA
-- =====================================================

-- Insert default categories
insert into public.categories (name, slug, description) values
  ('Baked Goods', 'baked_goods', 'Freshly baked breads, pastries, and desserts'),
  ('Groceries', 'groceries', 'General grocery items and ingredients')
on conflict (slug) do nothing;

-- Insert sample admin user (you can change this password)
-- Password: admin123 (hashed with bcrypt)
insert into public.users (email, password_hash, name, mobile, role) values
  ('lewis.s2021@outlook.com', '$2a$10$rQZ9K8mN2pL4vX7cF1hJ3qR6tY8uI9oP2eS5aB7cD4fG1hI2jK3lM4nO5pQ', 'Steve Lewis', '07700900123', 'admin')
on conflict (email) do nothing;

-- 5. CREATE FUNCTIONS
-- =====================================================

-- Place order atomic function
create or replace function public.place_order_atomic(
  p_user_id uuid,
  p_items jsonb,
  p_bag_opt_in boolean,
  p_pickup_date date,
  p_pickup_time time
)
returns uuid
language plpgsql
as $$
declare
  v_order_id uuid := gen_random_uuid();
  v_subtotal integer := 0;
  v_bag_fee integer := case when p_bag_opt_in then 70 else 0 end;
  v_total integer := 0;
  it jsonb;
  v_pid uuid;
  v_qty int;
  v_price int;
  updated int;
begin
  for it in select * from jsonb_array_elements(p_items) loop
    v_pid := (it->>'product_id')::uuid;
    v_qty := (it->>'qty')::int;
    v_price := (it->>'price_pence')::int;
    if v_qty <= 0 then raise exception 'Invalid qty for product %', v_pid; end if;
    update public.products
      set stock = stock - v_qty, updated_at = now()
      where id = v_pid and visible = true and stock >= v_qty
    returning 1 into updated;
    if updated is null then
      raise exception 'Insufficient stock for product %', v_pid;
    end if;
    v_subtotal := v_subtotal + (v_price * v_qty);
  end loop;
  v_total := v_subtotal + v_bag_fee;
  insert into public.orders (id, user_id, items, subtotal_pence, bag_opt_in, bag_fee_pence, total_pence, status, pickup_date, pickup_time)
  values (v_order_id, p_user_id, p_items, v_subtotal, p_bag_opt_in, v_bag_fee, v_total, 'unpaid', p_pickup_date, p_pickup_time);
  return v_order_id;
exception
  when others then
    raise;
end;
$$;

-- 6. ENABLE ROW LEVEL SECURITY
-- =====================================================
alter table public.users enable row level security;
alter table public.orders enable row level security;
alter table public.products enable row level security;
alter table public.audit_logs enable row level security;
alter table public.suggestions enable row level security;
alter table public.categories enable row level security;

-- 7. CREATE RLS POLICIES
-- =====================================================

-- Products policies
create policy catalogue_read on public.products 
  for select using (visible = true and stock > 0);

create policy products_admin_all on public.products 
  for all using (
    exists (
      select 1 from public.users 
      where id = auth.uid() 
      and role = 'admin'
    )
  );

-- Orders policies
create policy orders_read_own on public.orders 
  for select using (auth.uid() = user_id);

create policy orders_insert_own on public.orders 
  for insert with check (auth.uid() = user_id);

create policy orders_admin_all on public.orders 
  for all using (
    exists (
      select 1 from public.users 
      where id = auth.uid() 
      and role = 'admin'
    )
  );

-- Users policies
create policy users_read_own on public.users 
  for select using (auth.uid() = id);

create policy users_update_own on public.users 
  for update using (auth.uid() = id);

create policy users_admin_read on public.users 
  for select using (
    exists (
      select 1 from public.users 
      where id = auth.uid() 
      and role = 'admin'
    )
  );

-- Suggestions policies
create policy suggestions_read_own on public.suggestions 
  for select using (auth.uid() = user_id);

create policy suggestions_insert on public.suggestions 
  for insert with check (true);

create policy suggestions_admin_read on public.suggestions 
  for select using (
    exists (
      select 1 from public.users 
      where id = auth.uid() 
      and role = 'admin'
    )
  );

create policy suggestions_admin_delete on public.suggestions 
  for delete using (
    exists (
      select 1 from public.users 
      where id = auth.uid() 
      and role = 'admin'
    )
  );

-- Categories policies
create policy categories_read on public.categories 
  for select using (true);

create policy categories_admin_all on public.categories 
  for all using (
    exists (
      select 1 from public.users 
      where id = auth.uid() 
      and role = 'admin'
    )
  );

-- Audit logs policies
create policy audit_logs_admin_read on public.audit_logs 
  for select using (
    exists (
      select 1 from public.users 
      where id = auth.uid() 
      and role = 'admin'
    )
  );

-- 8. VERIFICATION QUERIES
-- =====================================================

-- Check tables created
SELECT 
  'Tables Created' as status,
  COUNT(*) as count
FROM information_schema.tables 
WHERE table_schema = 'public' 
  AND table_type = 'BASE TABLE';

-- Check policies created
SELECT 
  'Policies Created' as status,
  COUNT(*) as count
FROM pg_policies 
WHERE schemaname = 'public';

-- Check admin user created
SELECT 
  'Admin User' as status,
  email,
  role
FROM public.users 
WHERE role = 'admin';

-- Check categories created
SELECT 
  'Categories' as status,
  COUNT(*) as count
FROM public.categories;

-- 9. SAMPLE PRODUCTS (Optional)
-- =====================================================

-- Uncomment these lines if you want sample products
/*
insert into public.products (name, sku, short_description, price_pence, stock, visible, category_id) values
  ('Sourdough Bread', 'SOUR001', 'Traditional sourdough bread', 350, 20, true, (select id from public.categories where slug = 'baked_goods')),
  ('Chocolate Croissant', 'CROI001', 'Buttery croissant with chocolate', 250, 15, true, (select id from public.categories where slug = 'baked_goods')),
  ('Organic Flour', 'FLOUR001', '1kg organic bread flour', 180, 50, true, (select id from public.categories where slug = 'groceries'))
on conflict (sku) do nothing;
*/

-- =====================================================
-- SETUP COMPLETE!
-- =====================================================
-- Your database is now ready with:
-- ✅ All tables created
-- ✅ Proper RLS policies
-- ✅ Admin user (lewis.s2021@outlook.com)
-- ✅ Default categories
-- ✅ Order placement function
-- ✅ Security policies
-- =====================================================
