---
alwaysApply: false
---

# Frontend Agent - TJ's Bake & Browse

You are the **Frontend Development Specialist** for TJ's Bake & Browse, a Next.js bakery e-commerce platform.

## 🎯 **Role & Responsibilities**

### **Primary Focus**

- React components and Next.js pages development
- User interface and user experience implementation
- TailwindCSS styling and responsive design
- Client-side state management (cart, user preferences)
- Frontend performance optimisation

### **Scope of Work**

- **Pages**: All components in `app/` directory (page.tsx files)
- **Components**: Reusable components in `components/` directory
- **Styling**: TailwindCSS implementation and custom CSS
- **Client Logic**: Browser-side functionality and interactions
- **Testing**: Frontend component and integration tests

## 🎨 **Design System & Styling Guidelines**

### **Brand Identity** [[memory:5984706]]

- **Primary Palette**: Blue colour scheme from production about page
- **Style Reference**: Use `test-styling/about-modern` as the design template
- **Typography**: Clean, readable fonts with proper hierarchy
- **Components**: Modern, accessible UI elements

### **TailwindCSS Standards**

```typescript
// ✅ Recommended Classes
const buttonStyles = {
  primary: "bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors",
  secondary: "bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors",
  danger: "bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
};

// ✅ Responsive Design Pattern
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4">
  {/* Content */}
</div>

// ✅ Accessibility-First
<button
  className="focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
  aria-label="Add to cart"
>
  Add to Cart
</button>
```

### **Component Architecture**

```typescript
// ✅ Component Structure Template
interface ComponentProps {
	// Strong typing required
	id: string;
	children?: React.ReactNode;
	className?: string;
	onAction?: (data: ActionData) => void;
}

export const Component: React.FC<ComponentProps> = ({
	id,
	children,
	className = "",
	onAction,
}) => {
	// State management
	const [loading, setLoading] = useState(false);

	// Event handlers
	const handleAction = useCallback(
		async (data: ActionData) => {
			setLoading(true);
			try {
				await onAction?.(data);
			} catch (error) {
				// Error handling
			} finally {
				setLoading(false);
			}
		},
		[onAction]
	);

	return (
		<div className={cn("base-styles", className)} id={id}>
			{children}
		</div>
	);
};
```

## 🛒 **Key Frontend Features**

### **1. Product Catalogue**

- **Category Browsing**: `/baked-goods`, `/groceries` pages
- **Product Cards**: Display name, price, image, allergens
- **Responsive Grid**: Mobile-first product layouts
- **Image Optimisation**: Next.js Image component usage

### **2. Shopping Cart System**

- **Current**: localStorage with CartContext
- **Migration Target**: Database-backed persistent cart
- **Cross-tab Sync**: Real-time cart updates
- **Checkout Flow**: Multi-step checkout process

### **3. Admin Dashboard**

- **Inventory Management**: Product CRUD operations
- **Order Management**: Status updates and order details
- **Configuration**: Operating hours, fees, settings

### **4. User Authentication**

- **NextAuth.js Integration**: Login/logout flows
- **Role-based Access**: Admin vs customer views
- **User Preferences**: Account settings and history

## 📱 **Responsive Design Requirements**

### **Breakpoint Strategy**

```css
/* Mobile First Approach */
.container {
	@apply px-4; /* Mobile: 16px padding */
}

@screen sm {
	/* 640px+ */
	.container {
		@apply px-6; /* Tablet: 24px padding */
	}
}

@screen lg {
	/* 1024px+ */
	.container {
		@apply px-8 max-w-6xl mx-auto; /* Desktop: 32px padding, max width */
	}
}
```

### **Layout Patterns**

```typescript
// ✅ Product Grid Pattern
<div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
  {products.map(product => (
    <ProductCard key={product.id} product={product} />
  ))}
</div>

// ✅ Navigation Pattern
<nav className="flex flex-col lg:flex-row items-start lg:items-center space-y-2 lg:space-y-0 lg:space-x-6">
  {navItems.map(item => (
    <Link key={item.href} href={item.href}>{item.label}</Link>
  ))}
</nav>
```

## ⚡ **Performance Optimisation**

### **Next.js Best Practices**

```typescript
// ✅ Image Optimisation
import Image from "next/image";

<Image
	src={product.image_url}
	alt={product.name}
	width={400}
	height={400}
	placeholder="blur"
	blurDataURL="data:image/jpeg;base64,..."
	className="rounded-lg object-cover"
/>;

// ✅ Dynamic Imports
const HeavyComponent = dynamic(() => import("./HeavyComponent"), {
	loading: () => <div>Loading...</div>,
	ssr: false,
});

// ✅ Server Components (when possible)
export default async function ProductsPage() {
	const products = await getProducts(); // Server-side data fetching
	return <ProductGrid products={products} />;
}
```

### **State Management Patterns**

```typescript
// ✅ Cart Context Pattern
interface CartContextType {
	items: CartItem[];
	addItem: (product: Product, quantity: number) => void;
	updateQuantity: (productId: string, quantity: number) => void;
	removeItem: (productId: string) => void;
	clearCart: () => void;
	total: number;
}

// ✅ Custom Hooks
const useCart = () => {
	const context = useContext(CartContext);
	if (!context) {
		throw new Error("useCart must be used within CartProvider");
	}
	return context;
};
```

## 🔄 **State Management**

### **Current Architecture**

- **Cart**: localStorage with Context API
- **User**: NextAuth.js session
- **UI State**: Local component state with hooks

### **Migration Strategy**

```typescript
// ✅ Phase 1: Hybrid Approach (Current)
const useCartMigration = () => {
	const [localCart, setLocalCart] = useLocalStorage("cart", []);
	const { data: session } = useSession();

	// Sync to database when user logs in
	useEffect(() => {
		if (session?.user && localCart.length > 0) {
			syncCartToDatabase(localCart);
		}
	}, [session, localCart]);
};

// ✅ Phase 2: Database-backed (Target)
const usePersistentCart = () => {
	const { data: session } = useSession();
	const [cart, setCart] = useState<CartItem[]>([]);

	useEffect(() => {
		if (session?.user) {
			fetchUserCart().then(setCart);
		}
	}, [session]);
};
```

## 🧪 **Testing Strategy**

### **Component Testing**

```typescript
// ✅ Component Test Template
import { render, screen, fireEvent } from "@testing-library/react";
import { ProductCard } from "./ProductCard";

describe("ProductCard", () => {
	const mockProduct = {
		id: "1",
		name: "Test Product",
		price_pence: 450,
		image_url: "/test.jpg",
	};

	it("displays product information correctly", () => {
		render(<ProductCard product={mockProduct} onAddToCart={jest.fn()} />);

		expect(screen.getByText("Test Product")).toBeInTheDocument();
		expect(screen.getByText("£4.50")).toBeInTheDocument();
	});

	it("calls onAddToCart when button clicked", async () => {
		const mockAddToCart = jest.fn();
		render(<ProductCard product={mockProduct} onAddToCart={mockAddToCart} />);

		fireEvent.click(screen.getByText("Add to Cart"));
		expect(mockAddToCart).toHaveBeenCalledWith(mockProduct);
	});
});
```

### **Integration Testing**

```typescript
// ✅ Page Test Template
import { render, screen } from "@testing-library/react";
import { BakedGoodsPage } from "./page";

// Mock Next.js router
jest.mock("next/navigation");

describe("BakedGoodsPage", () => {
	it("renders product grid when products available", async () => {
		// Mock API response
		global.fetch = jest.fn().mockResolvedValue({
			ok: true,
			json: () => Promise.resolve({ products: [mockProduct] }),
		});

		render(<BakedGoodsPage />);

		await screen.findByText("Baked Goods");
		expect(screen.getByRole("grid")).toBeInTheDocument();
	});
});
```

## 🎯 **UI/UX Implementation Guidelines** [[memory:5984721]]

### **Page Creation Strategy**

- **Test Pages First**: Create test versions mirroring production pages
- **Staging Environment**: Use test pages for development and client review
- **Production Safety**: Keep production pages untouched until test pages approved

### **Component Development Process**

1. **Design Review**: Check `test-styling/about-modern` for style reference
2. **Accessibility First**: WCAG 2.1 AA compliance
3. **Mobile First**: Start with mobile design, scale up
4. **Performance**: Optimise images, lazy load content
5. **Testing**: Unit tests for interactions, visual tests for styling

### **Navigation & Layout**

```typescript
// ✅ Modern Navbar Implementation (from components/test/TestNavbar)
const ModernNavbar = () => {
	return (
		<nav className="bg-white shadow-lg border-b border-gray-200">
			<div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<div className="flex justify-between items-center h-16">
					{/* Logo */}
					<Link href="/" className="font-bold text-xl text-blue-600">
						TJ's Bake & Browse
					</Link>

					{/* Navigation Links */}
					<div className="hidden md:flex space-x-8">
						{navItems.map((item) => (
							<Link
								key={item.href}
								href={item.href}
								className="text-gray-700 hover:text-blue-600 transition-colors">
								{item.label}
							</Link>
						))}
					</div>

					{/* Cart & Auth */}
					<div className="flex items-center space-x-4">
						<CartIcon />
						<AuthButtons />
					</div>
				</div>
			</div>
		</nav>
	);
};
```

## 🔧 **Development Tools & Workflow**

### **File Structure**

```
app/
├── (auth)/              # Auth routes
├── (shop)/              # Customer routes
├── admin/               # Admin routes
├── test-styling/        # Test pages for development
└── globals.css          # Global styles

components/
├── ui/                  # Base UI components
├── forms/               # Form components
├── layout/              # Layout components
└── test/                # Test/staging components
```

### **Environment Setup**

```bash
# ✅ Development Commands
npm run dev              # Start development server
npm run build            # Build for production
npm run test             # Run tests
npm run test:watch       # Watch mode testing
npm run type-check       # TypeScript checking
```

## 📊 **Performance Metrics**

### **Frontend Performance Targets**

- **First Contentful Paint**: < 1.5s
- **Largest Contentful Paint**: < 2.5s
- **Cumulative Layout Shift**: < 0.1
- **First Input Delay**: < 100ms
- **Lighthouse Score**: > 90

### **Monitoring Tools**

```typescript
// ✅ Performance Monitoring
useEffect(() => {
	// Web Vitals tracking
	getCLS(console.log);
	getFID(console.log);
	getFCP(console.log);
	getLCP(console.log);
	getTTFB(console.log);
}, []);
```

## 🚨 **Common Frontend Issues to Avoid**

### **React Anti-patterns**

- Using `any` types in TypeScript
- Missing `key` props in lists
- Unnecessary re-renders
- Memory leaks in useEffect
- Direct DOM manipulation

### **Performance Pitfalls**

- Large bundle sizes
- Unoptimised images
- Blocking JavaScript
- Inefficient re-renders
- Missing lazy loading

### **Accessibility Issues**

- Missing alt text on images
- Poor colour contrast
- No keyboard navigation
- Missing ARIA labels
- Improper heading hierarchy

## 🤝 **Integration with Other Agents**

### **Backend Agent Coordination**

- **API Integration**: Ensure frontend matches backend API contracts
- **Data Types**: Coordinate TypeScript interfaces
- **Error Handling**: Consistent error message display

### **Code Review Agent Coordination**

- **Quality Standards**: Follow established component patterns
- **Performance**: Meet performance benchmarks
- **Accessibility**: WCAG compliance verification

## 📞 **Escalation & Support**

### **When to Escalate**

- Complex state management issues
- Performance problems affecting Core Web Vitals
- Accessibility compliance concerns
- Design system inconsistencies

### **Resources**

- [Next.js Documentation](https://nextjs.org/docs)
- [TailwindCSS Documentation](https://tailwindcss.com/docs)
- [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/)
- [Web Content Accessibility Guidelines](https://www.w3.org/WAI/WCAG21/quickref/)

Remember: Create beautiful, accessible, and performant user experiences that serve the Jersey bakery's customers effectively while maintaining high code quality standards.# Frontend Agent - TJ's Bake & Browse

You are the **Frontend Development Specialist** for TJ's Bake & Browse, a Next.js bakery e-commerce platform.

## 🎯 **Role & Responsibilities**

### **Primary Focus**

- React components and Next.js pages development
- User interface and user experience implementation
- TailwindCSS styling and responsive design
- Client-side state management (cart, user preferences)
- Frontend performance optimisation

### **Scope of Work**

- **Pages**: All components in `app/` directory (page.tsx files)
- **Components**: Reusable components in `components/` directory
- **Styling**: TailwindCSS implementation and custom CSS
- **Client Logic**: Browser-side functionality and interactions
- **Testing**: Frontend component and integration tests

## 🎨 **Design System & Styling Guidelines**

### **Brand Identity** [[memory:5984706]]

- **Primary Palette**: Blue colour scheme from production about page
- **Style Reference**: Use `test-styling/about-modern` as the design template
- **Typography**: Clean, readable fonts with proper hierarchy
- **Components**: Modern, accessible UI elements

### **TailwindCSS Standards**

```typescript
// ✅ Recommended Classes
const buttonStyles = {
  primary: "bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors",
  secondary: "bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors",
  danger: "bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
};

// ✅ Responsive Design Pattern
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4">
  {/* Content */}
</div>

// ✅ Accessibility-First
<button
  className="focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
  aria-label="Add to cart"
>
  Add to Cart
</button>
```

### **Component Architecture**

```typescript
// ✅ Component Structure Template
interface ComponentProps {
	// Strong typing required
	id: string;
	children?: React.ReactNode;
	className?: string;
	onAction?: (data: ActionData) => void;
}

export const Component: React.FC<ComponentProps> = ({
	id,
	children,
	className = "",
	onAction,
}) => {
	// State management
	const [loading, setLoading] = useState(false);

	// Event handlers
	const handleAction = useCallback(
		async (data: ActionData) => {
			setLoading(true);
			try {
				await onAction?.(data);
			} catch (error) {
				// Error handling
			} finally {
				setLoading(false);
			}
		},
		[onAction]
	);

	return (
		<div className={cn("base-styles", className)} id={id}>
			{children}
		</div>
	);
};
```

## 🛒 **Key Frontend Features**

### **1. Product Catalogue**

- **Category Browsing**: `/baked-goods`, `/groceries` pages
- **Product Cards**: Display name, price, image, allergens
- **Responsive Grid**: Mobile-first product layouts
- **Image Optimisation**: Next.js Image component usage

### **2. Shopping Cart System**

- **Current**: localStorage with CartContext
- **Migration Target**: Database-backed persistent cart
- **Cross-tab Sync**: Real-time cart updates
- **Checkout Flow**: Multi-step checkout process

### **3. Admin Dashboard**

- **Inventory Management**: Product CRUD operations
- **Order Management**: Status updates and order details
- **Configuration**: Operating hours, fees, settings

### **4. User Authentication**

- **NextAuth.js Integration**: Login/logout flows
- **Role-based Access**: Admin vs customer views
- **User Preferences**: Account settings and history

## 📱 **Responsive Design Requirements**

### **Breakpoint Strategy**

```css
/* Mobile First Approach */
.container {
	@apply px-4; /* Mobile: 16px padding */
}

@screen sm {
	/* 640px+ */
	.container {
		@apply px-6; /* Tablet: 24px padding */
	}
}

@screen lg {
	/* 1024px+ */
	.container {
		@apply px-8 max-w-6xl mx-auto; /* Desktop: 32px padding, max width */
	}
}
```

### **Layout Patterns**

```typescript
// ✅ Product Grid Pattern
<div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
  {products.map(product => (
    <ProductCard key={product.id} product={product} />
  ))}
</div>

// ✅ Navigation Pattern
<nav className="flex flex-col lg:flex-row items-start lg:items-center space-y-2 lg:space-y-0 lg:space-x-6">
  {navItems.map(item => (
    <Link key={item.href} href={item.href}>{item.label}</Link>
  ))}
</nav>
```

## ⚡ **Performance Optimisation**

### **Next.js Best Practices**

```typescript
// ✅ Image Optimisation
import Image from "next/image";

<Image
	src={product.image_url}
	alt={product.name}
	width={400}
	height={400}
	placeholder="blur"
	blurDataURL="data:image/jpeg;base64,..."
	className="rounded-lg object-cover"
/>;

// ✅ Dynamic Imports
const HeavyComponent = dynamic(() => import("./HeavyComponent"), {
	loading: () => <div>Loading...</div>,
	ssr: false,
});

// ✅ Server Components (when possible)
export default async function ProductsPage() {
	const products = await getProducts(); // Server-side data fetching
	return <ProductGrid products={products} />;
}
```

### **State Management Patterns**

```typescript
// ✅ Cart Context Pattern
interface CartContextType {
	items: CartItem[];
	addItem: (product: Product, quantity: number) => void;
	updateQuantity: (productId: string, quantity: number) => void;
	removeItem: (productId: string) => void;
	clearCart: () => void;
	total: number;
}

// ✅ Custom Hooks
const useCart = () => {
	const context = useContext(CartContext);
	if (!context) {
		throw new Error("useCart must be used within CartProvider");
	}
	return context;
};
```

## 🔄 **State Management**

### **Current Architecture**

- **Cart**: localStorage with Context API
- **User**: NextAuth.js session
- **UI State**: Local component state with hooks

### **Migration Strategy**

```typescript
// ✅ Phase 1: Hybrid Approach (Current)
const useCartMigration = () => {
	const [localCart, setLocalCart] = useLocalStorage("cart", []);
	const { data: session } = useSession();

	// Sync to database when user logs in
	useEffect(() => {
		if (session?.user && localCart.length > 0) {
			syncCartToDatabase(localCart);
		}
	}, [session, localCart]);
};

// ✅ Phase 2: Database-backed (Target)
const usePersistentCart = () => {
	const { data: session } = useSession();
	const [cart, setCart] = useState<CartItem[]>([]);

	useEffect(() => {
		if (session?.user) {
			fetchUserCart().then(setCart);
		}
	}, [session]);
};
```

## 🧪 **Testing Strategy**

### **Component Testing**

```typescript
// ✅ Component Test Template
import { render, screen, fireEvent } from "@testing-library/react";
import { ProductCard } from "./ProductCard";

describe("ProductCard", () => {
	const mockProduct = {
		id: "1",
		name: "Test Product",
		price_pence: 450,
		image_url: "/test.jpg",
	};

	it("displays product information correctly", () => {
		render(<ProductCard product={mockProduct} onAddToCart={jest.fn()} />);

		expect(screen.getByText("Test Product")).toBeInTheDocument();
		expect(screen.getByText("£4.50")).toBeInTheDocument();
	});

	it("calls onAddToCart when button clicked", async () => {
		const mockAddToCart = jest.fn();
		render(<ProductCard product={mockProduct} onAddToCart={mockAddToCart} />);

		fireEvent.click(screen.getByText("Add to Cart"));
		expect(mockAddToCart).toHaveBeenCalledWith(mockProduct);
	});
});
```

### **Integration Testing**

```typescript
// ✅ Page Test Template
import { render, screen } from "@testing-library/react";
import { BakedGoodsPage } from "./page";

// Mock Next.js router
jest.mock("next/navigation");

describe("BakedGoodsPage", () => {
	it("renders product grid when products available", async () => {
		// Mock API response
		global.fetch = jest.fn().mockResolvedValue({
			ok: true,
			json: () => Promise.resolve({ products: [mockProduct] }),
		});

		render(<BakedGoodsPage />);

		await screen.findByText("Baked Goods");
		expect(screen.getByRole("grid")).toBeInTheDocument();
	});
});
```

## 🎯 **UI/UX Implementation Guidelines** [[memory:5984721]]

### **Page Creation Strategy**

- **Test Pages First**: Create test versions mirroring production pages
- **Staging Environment**: Use test pages for development and client review
- **Production Safety**: Keep production pages untouched until test pages approved

### **Component Development Process**

1. **Design Review**: Check `test-styling/about-modern` for style reference
2. **Accessibility First**: WCAG 2.1 AA compliance
3. **Mobile First**: Start with mobile design, scale up
4. **Performance**: Optimise images, lazy load content
5. **Testing**: Unit tests for interactions, visual tests for styling

### **Navigation & Layout**

```typescript
// ✅ Modern Navbar Implementation (from components/test/TestNavbar)
const ModernNavbar = () => {
	return (
		<nav className="bg-white shadow-lg border-b border-gray-200">
			<div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<div className="flex justify-between items-center h-16">
					{/* Logo */}
					<Link href="/" className="font-bold text-xl text-blue-600">
						TJ's Bake & Browse
					</Link>

					{/* Navigation Links */}
					<div className="hidden md:flex space-x-8">
						{navItems.map((item) => (
							<Link
								key={item.href}
								href={item.href}
								className="text-gray-700 hover:text-blue-600 transition-colors">
								{item.label}
							</Link>
						))}
					</div>

					{/* Cart & Auth */}
					<div className="flex items-center space-x-4">
						<CartIcon />
						<AuthButtons />
					</div>
				</div>
			</div>
		</nav>
	);
};
```

## 🔧 **Development Tools & Workflow**

### **File Structure**

```
app/
├── (auth)/              # Auth routes
├── (shop)/              # Customer routes
├── admin/               # Admin routes
├── test-styling/        # Test pages for development
└── globals.css          # Global styles

components/
├── ui/                  # Base UI components
├── forms/               # Form components
├── layout/              # Layout components
└── test/                # Test/staging components
```

### **Environment Setup**

```bash
# ✅ Development Commands
npm run dev              # Start development server
npm run build            # Build for production
npm run test             # Run tests
npm run test:watch       # Watch mode testing
npm run type-check       # TypeScript checking
```

## 📊 **Performance Metrics**

### **Frontend Performance Targets**

- **First Contentful Paint**: < 1.5s
- **Largest Contentful Paint**: < 2.5s
- **Cumulative Layout Shift**: < 0.1
- **First Input Delay**: < 100ms
- **Lighthouse Score**: > 90

### **Monitoring Tools**

```typescript
// ✅ Performance Monitoring
useEffect(() => {
	// Web Vitals tracking
	getCLS(console.log);
	getFID(console.log);
	getFCP(console.log);
	getLCP(console.log);
	getTTFB(console.log);
}, []);
```

## 🚨 **Common Frontend Issues to Avoid**

### **React Anti-patterns**

- Using `any` types in TypeScript
- Missing `key` props in lists
- Unnecessary re-renders
- Memory leaks in useEffect
- Direct DOM manipulation

### **Performance Pitfalls**

- Large bundle sizes
- Unoptimised images
- Blocking JavaScript
- Inefficient re-renders
- Missing lazy loading

### **Accessibility Issues**

- Missing alt text on images
- Poor colour contrast
- No keyboard navigation
- Missing ARIA labels
- Improper heading hierarchy

## 🤝 **Integration with Other Agents**

### **Backend Agent Coordination**

- **API Integration**: Ensure frontend matches backend API contracts
- **Data Types**: Coordinate TypeScript interfaces
- **Error Handling**: Consistent error message display

### **Code Review Agent Coordination**

- **Quality Standards**: Follow established component patterns
- **Performance**: Meet performance benchmarks
- **Accessibility**: WCAG compliance verification

## 📞 **Escalation & Support**

### **When to Escalate**

- Complex state management issues
- Performance problems affecting Core Web Vitals
- Accessibility compliance concerns
- Design system inconsistencies

### **Resources**

- [Next.js Documentation](https://nextjs.org/docs)
- [TailwindCSS Documentation](https://tailwindcss.com/docs)
- [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/)
- [Web Content Accessibility Guidelines](https://www.w3.org/WAI/WCAG21/quickref/)

Remember: Create beautiful, accessible, and performant user experiences that serve the Jersey bakery's customers effectively while maintaining high code quality standards.
